# -*- coding: utf-8 -*-
"""wordcloud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XlWjAqz90Oy81VL8UWSQKCUEQCZkOi2m

** Generation of Word Cloud from a text file **
"""

# Pre-process the text by removing punctuation and uninteresting words

def text_preprocess():
  with open("sample.txt","r") as fd:
    global all_words
    all_words=[]
    for line in fd: 
      line=line.strip("\n")
      # line=line.strip(" ")    #Remove leading and trailing spaces
      # line=line.strip("\n")   # Remove \n at the end of line
      words=line.split(" ")     # split lines
      all_words=all_words+words # add words of each line to all_words list
    #print(all_words)
    # Identify words containing punctuation
    p='''!@#$%^&*()_-':;/?\,.' '" "'''
    uninteresting_words=["a","an","the","to","for","if","and","will","in","of","at","be","on","by","with","as","just"," ","have","has","had","do","did","done","he","she","it","they"]
    temp_list=[]
    for w in all_words:
      word=""
      if (not w.isalpha()):  # if word do not contain all aplhabets
        for ch in w:
          if ch not in p:
            word=word+ch     # remove punctuation from word
        if (word not in uninteresting_words):
          temp_list.append(word)           # add punctuation removed word to list when the word is not in uninteresting words list
      else:
        if (w not in uninteresting_words): # if word is not in interesting words list
          temp_list.append(w)              # add word to list
    return (temp_list)

word_list=text_preprocess()

# Calculate frequencies of each word using dictionary

def calculate_frequencies(word_list):
  dic={}
  for word in word_list:  # for each word in list
    if(word not in dic):
      dic[word]=1         # add word as key
    dic[word]+=1          # increment count
  return dic

word_freq=calculate_frequencies(word_list)

# Generate word cloud 

import wordcloud
import matplotlib.pyplot as plt
cloud = wordcloud.WordCloud()
#cloud.to_file("mywordcloud.jpg")  # to generate wordcloud as a file 
myimg=cloud.generate_from_frequencies(word_freq)
plt.imshow(myimg, interpolation='nearest')
plt.axis("off")
plt.imshow(myimg)